= simple_form_for @product.setup_nested, wrapper: :inline, :validate => true do |f|
  = f.error_notification
  %fieldset
    %legend= I18n.t("products.defaults.item_name_fieldset")
    .row.inputs
      .span5
        .large-hint= I18n.t("products.defaults.item_name_description")
      .span7.offset1
        = f.input :brand, as: :autocomplete
        = f.input :sub_brand
        = f.input :functional_name
        = f.input :variant

  = f.simple_fields_for :packages, wrapper: :inline do |p|
    %fieldset
      %legend= I18n.t("products.defaults.net_content_fieldset")
      .row.inputs
        .span5
          .large-hint= I18n.t("products.defaults.net_content_description")
        .span7.offset1
          = p.fields_for :contents do |c|
            .clearfix.string.optional.net_content
              = c.label :value, ProductDecorator.measure_value_label(c.object, :value, show_unit: false), class: "string optional"
              .input
                = c.text_field :value, :class => "string optional", "data-validate" => true
                = c.select :unit, ProductDecorator.unit_options(c.object)
  %fieldset
    %legend= I18n.t("products.defaults.item_identification_fieldset")
    .row.inputs
      .span5
        .large-hint= I18n.t("products.defaults.item_identification_description")
      .span7.offset1
        = f.simple_fields_for :product_codes, wrapper: :inline, :validate => false do |n|
          = n.input :value, label: I18n.t("product_codes.#{n.object.name}"), required: false
          = n.input :name, as: :hidden
        = f.input :gtin

  = f.simple_fields_for :packages, wrapper: :inline do |p|
    %fieldset
      %legend= I18n.t("products.defaults.weight_fieldset")
      .row.inputs
        .span5
          .large-hint= I18n.t("products.defaults.weight_description")
        .span7.offset1
          = p.simple_fields_for :weights, wrapper: :inline do |w|
            = w.input :gross, label: ProductDecorator.measure_value_label(w.object, :gross), required: false, input_html: { "data-validate-with" => "net" }
            = w.input :net, label: ProductDecorator.measure_value_label(w.object, :net), required: false, input_html: { "data-validate-with" => "gross", "data-validate-require" => "gross" }
            = w.input :unit, as: :hidden

    %fieldset
      %legend= I18n.t("products.defaults.dimensions_fieldset")
      .row.inputs
        .span5
          .large-hint= I18n.t("products.defaults.dimensions_description")
        .span7.offset1
          = p.simple_fields_for :dimensions, wrapper: :inline do |d|
            = d.input :height, label: ProductDecorator.measure_value_label(d.object, :height), required: false, input_html: { "data-require-in-group" => "true" }
            = d.input :width,  label: ProductDecorator.measure_value_label(d.object, :width), required: false, input_html: { "data-require-in-group" => "true" }
            = d.input :depth,  label: ProductDecorator.measure_value_label(d.object, :depth), required: false, input_html: { "data-require-in-group" => "true" }, wrapper_html: {class: "depth"}
            = d.input :unit, as: :hidden

  %fieldset
    %legend= I18n.t("products.defaults.provenance_fieldset")
    .row.inputs
      .span5
        .large-hint= I18n.t("products.defaults.provenance_description")
      .span7.offset1
        = f.input :manufacturer, as: :autocomplete
        = f.input :country_of_origin, include_blank: false

  %fieldset
    %legend= I18n.t("products.defaults.description_fieldset")
    .row.inputs
      .span5
        .large-hint= I18n.t("products.defaults.description_description") 
      .span7.offset1
        = f.input :description, as: :text
    
    -#= f.input :short_description
    -#= f.input :tags_list, as: :autocomplete, multiple: true, autocomplete_by: :tags_name
    -#= f.input :visibility, collection: ProductDecorator.visibility_options, include_blank: false

  %fieldset
    %legend= I18n.t("products.defaults.comment_fieldset")
    .row.inputs
      .span5
        .large-hint= I18n.t("products.defaults.comment_description")
      .span7.offset1
        = simple_fields_for @comment, wrapper: :inline, :validate => false do |n|
          = n.input :body, as: :text, required: false

  .actions
    = f.button :submit, class: "primary"
    = button_tag t("cancel"), type: :reset, class: "btn"
